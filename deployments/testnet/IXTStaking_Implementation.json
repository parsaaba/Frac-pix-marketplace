{
  "address": "0x080F48a176093EDB3c4e0dFe1c0c6118e1f8c4Cb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDistribution",
          "type": "address"
        }
      ],
      "name": "RewardsDistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad5d4c05f2503b72949ec8bcb6d1086d538b94062c114e85cec638157929a486",
  "receipt": {
    "to": null,
    "from": "0xD7D4587b5524b32e24F1eE7581D543C775df27B5",
    "contractAddress": "0x080F48a176093EDB3c4e0dFe1c0c6118e1f8c4Cb",
    "transactionIndex": 10,
    "gasUsed": "1536643",
    "logsBloom": "0x
    "blockHash": "0x1a95a801b40a769bcf370131e6dc940979cbe8a00755c1e4b31c4d2a9ead573b",
    "transactionHash": "0xad5d4c05f2503b72949ec8bcb6d1086d538b94062c114e85cec638157929a486",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 25332399,
        "transactionHash": "0xad5d4c05f2503b72949ec8bcb6d1086d538b94062c114e85cec638157929a486",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d7d4587b5524b32e24f1ee7581d543c775df27b5",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000aeb2325c235ac0000000000000000000000000000000000000000000000003bf3b340c9405b090000000000000000000000000000000000000000000000aec26adc67fa1190790000000000000000000000000000000000000000000000003be8c81da37e255d0000000000000000000000000000000000000000000000aec275c78b1fd3c625",
        "logIndex": 114,
        "blockHash": "0x1a95a801b40a769bcf370131e6dc940979cbe8a00755c1e4b31c4d2a9ead573b"
      }
    ],
    "blockNumber": 25332399,
    "cumulativeGasUsed": "3887978",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "05647119360b4ea449c3a00c7d90af72",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TokenStaking.sol\":\"TokenStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x45ed45e599d282187d4eb122e5b99e403f3d87853ba6c28a844702141d3fa587\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x046a0ed44997d20c6fac6fb186cb2ce8957a1b25497f713bc18c79db21e57dee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"contracts/staking/TokenStaking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\ncontract TokenStaking is OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20Upgradeable public rewardsToken;\\n    IERC20Upgradeable public stakingToken;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public rewardsDuration;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    address public rewardsDistribution;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        address _rewardsDistribution,\\n        address _rewardsToken,\\n        address _stakingToken,\\n        uint256 _rewardsDuration\\n    ) external initializer {\\n        require(_rewardsToken != address(0), \\\"rewardToken must not 0x\\\");\\n        require(_stakingToken != address(0), \\\"stakingToken must not 0x\\\");\\n        require(_rewardsDistribution != address(0), \\\"rewardDistribution must not 0x\\\");\\n        require(_rewardsDuration != 0, \\\"rewardsDuration must not 0\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        rewardsToken = IERC20Upgradeable(_rewardsToken);\\n        stakingToken = IERC20Upgradeable(_stakingToken);\\n        rewardsDistribution = _rewardsDistribution;\\n        rewardsDuration = _rewardsDuration;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) /\\n            1e18 +\\n            rewards[account];\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate * rewardsDuration;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply += amount;\\n        _balances[msg.sender] += amount;\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply -= amount;\\n        _balances[msg.sender] -= amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward) external updateReward(address(0)) {\\n        require(msg.sender == rewardsDistribution, \\\"Not rewardsDistribution\\\");\\n\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / rewardsDuration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (reward + leftover) / rewardsDuration;\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardsDuration;\\n        emit RewardAdded(reward);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(\\n            tokenAddress != address(stakingToken) && tokenAddress != address(rewardsToken),\\n            \\\"Cannot withdraw the staking token and reward token\\\"\\n        );\\n        IERC20Upgradeable(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(_rewardsDuration);\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\\n        require(_rewardsDistribution != address(0), \\\"rewardDistribution must not 0x\\\");\\n        rewardsDistribution = _rewardsDistribution;\\n        emit RewardsDistributionUpdated(_rewardsDistribution);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event RewardsDistributionUpdated(address newDistribution);\\n    event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x3f20468acb1b24fc0387f234b2e0d443dbaf1ae3f8a47a89fb2ce9736e112839\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ad6806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c80637b0a47ee1161010f578063cc1a378f116100a2578063df136d6511610071578063df136d65146103d2578063e9fad8ee146103db578063ebe2b12b146103e3578063f2fde38b146103ec57600080fd5b8063cc1a378f14610391578063cd3daf9d146103a4578063cf756fdf146103ac578063d1af0c7d146103bf57600080fd5b80638b876347116100de5780638b876347146103445780638da5cb5b14610364578063a694fc3a14610375578063c8f33c911461038857600080fd5b80637b0a47ee1461031857806380faa57d146103215780638456cb59146103295780638980f11f1461033157600080fd5b80633c6b16ab116101875780635c975abb116101565780635c975abb146102be57806370a08231146102d4578063715018a6146102fd57806372f702f31461030557600080fd5b80633c6b16ab146102705780633d18b912146102835780633f4ba83a1461028b5780633fc6df6e1461029357600080fd5b806319762143116101c357806319762143146102375780631c1f78eb1461024c5780632e1a7d4d14610254578063386a95251461026757600080fd5b80628cc262146101e95780630700037d1461020f57806318160ddd1461022f575b600080fd5b6101fc6101f7366004611822565b6103ff565b6040519081526020015b60405180910390f35b6101fc61021d366004611822565b60d26020526000908152604090205481565b60d3546101fc565b61024a610245366004611822565b61047c565b005b6101fc61055a565b61024a6102623660046118cf565b610571565b6101fc60cd5481565b61024a61027e3660046118cf565b6106c9565b61024a610844565b61024a610941565b60d0546102a6906001600160a01b031681565b6040516001600160a01b039091168152602001610206565b60975460ff166040519015158152602001610206565b6101fc6102e2366004611822565b6001600160a01b0316600090815260d4602052604090205490565b61024a610975565b60ca546102a6906001600160a01b031681565b6101fc60cc5481565b6101fc6109a9565b61024a6109c0565b61024a61033f366004611886565b6109f2565b6101fc610352366004611822565b60d16020526000908152604090205481565b6033546001600160a01b03166102a6565b61024a6103833660046118cf565b610b02565b6101fc60ce5481565b61024a61039f3660046118cf565b610c91565b6101fc610d8d565b61024a6103ba36600461183c565b610def565b60c9546102a6906001600160a01b031681565b6101fc60cf5481565b61024a611008565b6101fc60cb5481565b61024a6103fa366004611822565b611029565b6001600160a01b038116600090815260d2602090815260408083205460d1909252822054670de0b6b3a764000090610435610d8d565b61043f9190611a47565b6001600160a01b038516600090815260d460205260409020546104629190611a28565b61046c9190611a08565b61047691906119f0565b92915050565b6033546001600160a01b031633146104af5760405162461bcd60e51b81526004016104a690611984565b60405180910390fd5b6001600160a01b0381166105055760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f74203078000060448201526064016104a6565b60d080546001600160a01b0319166001600160a01b0383169081179091556040519081527f1c794a043683a294127c95bc365bae91b63b651eb9884a2c9120afee2bb690b4906020015b60405180910390a150565b600060cd5460cc5461056c9190611a28565b905090565b600260655414156105945760405162461bcd60e51b81526004016104a6906119b9565b6002606555336105a2610d8d565b60cf556105ad6109a9565b60ce556001600160a01b038116156105f4576105c8816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b600082116106385760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b60448201526064016104a6565b8160d3600082825461064a9190611a47565b909155505033600090815260d460205260408120805484929061066e908490611a47565b909155505060ca5461068a906001600160a01b031633846110c4565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001606555565b60006106d3610d8d565b60cf556106de6109a9565b60ce556001600160a01b03811615610725576106f9816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b60d0546001600160a01b0316331461077f5760405162461bcd60e51b815260206004820152601760248201527f4e6f742072657761726473446973747269627574696f6e00000000000000000060448201526064016104a6565b60c954610797906001600160a01b031633308561112c565b60cb5442106107b55760cd546107ad9083611a08565b60cc556107f7565b60004260cb546107c59190611a47565b9050600060cc54826107d79190611a28565b60cd549091506107e782866119f0565b6107f19190611a08565b60cc5550505b4260ce81905560cd54610809916119f0565b60cb556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b600260655414156108675760405162461bcd60e51b81526004016104a6906119b9565b600260655533610875610d8d565b60cf556108806109a9565b60ce556001600160a01b038116156108c75761089b816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b33600090815260d2602052604090205480156109385733600081815260d2602052604081205560c954610906916001600160a01b0390911690836110c4565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016106b8565b50506001606555565b6033546001600160a01b0316331461096b5760405162461bcd60e51b81526004016104a690611984565b61097361116a565b565b6033546001600160a01b0316331461099f5760405162461bcd60e51b81526004016104a690611984565b61097360006111fd565b600060cb5442106109bb575060cb5490565b504290565b6033546001600160a01b031633146109ea5760405162461bcd60e51b81526004016104a690611984565b61097361124f565b6033546001600160a01b03163314610a1c5760405162461bcd60e51b81526004016104a690611984565b60ca546001600160a01b03838116911614801590610a48575060c9546001600160a01b03838116911614155b610aaf5760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b65604482015271371030b732103932bbb0b932103a37b5b2b760711b60648201526084016104a6565b610ac36001600160a01b03831633836110c4565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610838565b60026065541415610b255760405162461bcd60e51b81526004016104a6906119b9565b600260655560975460ff1615610b705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104a6565b33610b79610d8d565b60cf55610b846109a9565b60ce556001600160a01b03811615610bcb57610b9f816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b60008211610c0c5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b60448201526064016104a6565b8160d36000828254610c1e91906119f0565b909155505033600090815260d4602052604081208054849290610c429084906119f0565b909155505060ca54610c5f906001600160a01b031633308561112c565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016106b8565b6033546001600160a01b03163314610cbb5760405162461bcd60e51b81526004016104a690611984565b60cb544211610d585760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a4016104a6565b60cd8190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200161054f565b600060d35460001415610da1575060cf5490565b60d35460cc5460ce54610db26109a9565b610dbc9190611a47565b610dc69190611a28565b610dd890670de0b6b3a7640000611a28565b610de29190611a08565b60cf5461056c91906119f0565b600054610100900460ff1680610e08575060005460ff16155b610e245760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff16158015610e46576000805461ffff19166101011790555b6001600160a01b038416610e9c5760405162461bcd60e51b815260206004820152601760248201527f726577617264546f6b656e206d757374206e6f7420307800000000000000000060448201526064016104a6565b6001600160a01b038316610ef25760405162461bcd60e51b815260206004820152601860248201527f7374616b696e67546f6b656e206d757374206e6f74203078000000000000000060448201526064016104a6565b6001600160a01b038516610f485760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f74203078000060448201526064016104a6565b81610f955760405162461bcd60e51b815260206004820152601a60248201527f726577617264734475726174696f6e206d757374206e6f74203000000000000060448201526064016104a6565b610f9d6112ca565b610fa5611345565b610fad6113a4565b60c980546001600160a01b038087166001600160a01b03199283161790925560ca805486841690831617905560d080549288169290911691909117905560cd8290558015611001576000805461ff00191690555b5050505050565b33600090815260d4602052604090205461102190610571565b610973610844565b6033546001600160a01b031633146110535760405162461bcd60e51b81526004016104a690611984565b6001600160a01b0381166110b85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a6565b6110c1816111fd565b50565b6040516001600160a01b03831660248201526044810182905261112790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261140b565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526111649085906323b872dd60e01b906084016110f0565b50505050565b60975460ff166111b35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104a6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156112955760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104a6565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111e03390565b600054610100900460ff16806112e3575060005460ff16155b6112ff5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff16158015611321576000805461ffff19166101011790555b6113296114dd565b611331611547565b80156110c1576000805461ff001916905550565b600054610100900460ff168061135e575060005460ff16155b61137a5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff1615801561139c576000805461ffff19166101011790555b6113316115a7565b600054610100900460ff16806113bd575060005460ff16155b6113d95760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff161580156113fb576000805461ffff19166101011790555b6114036114dd565b611331611617565b6000611460826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661168c9092919063ffffffff16565b805190915015611127578080602001905181019061147e91906118af565b6111275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a6565b600054610100900460ff16806114f6575060005460ff16155b6115125760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff16158015611331576000805461ffff191661010117905580156110c1576000805461ff001916905550565b600054610100900460ff1680611560575060005460ff16155b61157c5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff1615801561159e576000805461ffff19166101011790555b611331336111fd565b600054610100900460ff16806115c0575060005460ff16155b6115dc5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff161580156115fe576000805461ffff19166101011790555b600160655580156110c1576000805461ff001916905550565b600054610100900460ff1680611630575060005460ff16155b61164c5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff1615801561166e576000805461ffff19166101011790555b6097805460ff1916905580156110c1576000805461ff001916905550565b606061169b84846000856116a5565b90505b9392505050565b6060824710156117065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a6565b843b6117545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a6565b600080866001600160a01b0316858760405161177091906118e7565b60006040518083038185875af1925050503d80600081146117ad576040519150601f19603f3d011682016040523d82523d6000602084013e6117b2565b606091505b50915091506117c28282866117cd565b979650505050505050565b606083156117dc57508161169e565b8251156117ec5782518084602001fd5b8160405162461bcd60e51b81526004016104a69190611903565b80356001600160a01b038116811461181d57600080fd5b919050565b600060208284031215611833578081fd5b61169e82611806565b60008060008060808587031215611851578283fd5b61185a85611806565b935061186860208601611806565b925061187660408601611806565b9396929550929360600135925050565b60008060408385031215611898578182fd5b6118a183611806565b946020939093013593505050565b6000602082840312156118c0578081fd5b8151801515811461169e578182fd5b6000602082840312156118e0578081fd5b5035919050565b600082516118f9818460208701611a5e565b9190910192915050565b6020815260008251806020840152611922816040850160208701611a5e565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611a0357611a03611a8a565b500190565b600082611a2357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a4257611a42611a8a565b500290565b600082821015611a5957611a59611a8a565b500390565b60005b83811015611a79578181015183820152602001611a61565b838111156111645750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207adcb9a99cea2be8083819d6b9869df96d4959977a8f1285cb401d1b9a5701ea64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e45760003560e01c80637b0a47ee1161010f578063cc1a378f116100a2578063df136d6511610071578063df136d65146103d2578063e9fad8ee146103db578063ebe2b12b146103e3578063f2fde38b146103ec57600080fd5b8063cc1a378f14610391578063cd3daf9d146103a4578063cf756fdf146103ac578063d1af0c7d146103bf57600080fd5b80638b876347116100de5780638b876347146103445780638da5cb5b14610364578063a694fc3a14610375578063c8f33c911461038857600080fd5b80637b0a47ee1461031857806380faa57d146103215780638456cb59146103295780638980f11f1461033157600080fd5b80633c6b16ab116101875780635c975abb116101565780635c975abb146102be57806370a08231146102d4578063715018a6146102fd57806372f702f31461030557600080fd5b80633c6b16ab146102705780633d18b912146102835780633f4ba83a1461028b5780633fc6df6e1461029357600080fd5b806319762143116101c357806319762143146102375780631c1f78eb1461024c5780632e1a7d4d14610254578063386a95251461026757600080fd5b80628cc262146101e95780630700037d1461020f57806318160ddd1461022f575b600080fd5b6101fc6101f7366004611822565b6103ff565b6040519081526020015b60405180910390f35b6101fc61021d366004611822565b60d26020526000908152604090205481565b60d3546101fc565b61024a610245366004611822565b61047c565b005b6101fc61055a565b61024a6102623660046118cf565b610571565b6101fc60cd5481565b61024a61027e3660046118cf565b6106c9565b61024a610844565b61024a610941565b60d0546102a6906001600160a01b031681565b6040516001600160a01b039091168152602001610206565b60975460ff166040519015158152602001610206565b6101fc6102e2366004611822565b6001600160a01b0316600090815260d4602052604090205490565b61024a610975565b60ca546102a6906001600160a01b031681565b6101fc60cc5481565b6101fc6109a9565b61024a6109c0565b61024a61033f366004611886565b6109f2565b6101fc610352366004611822565b60d16020526000908152604090205481565b6033546001600160a01b03166102a6565b61024a6103833660046118cf565b610b02565b6101fc60ce5481565b61024a61039f3660046118cf565b610c91565b6101fc610d8d565b61024a6103ba36600461183c565b610def565b60c9546102a6906001600160a01b031681565b6101fc60cf5481565b61024a611008565b6101fc60cb5481565b61024a6103fa366004611822565b611029565b6001600160a01b038116600090815260d2602090815260408083205460d1909252822054670de0b6b3a764000090610435610d8d565b61043f9190611a47565b6001600160a01b038516600090815260d460205260409020546104629190611a28565b61046c9190611a08565b61047691906119f0565b92915050565b6033546001600160a01b031633146104af5760405162461bcd60e51b81526004016104a690611984565b60405180910390fd5b6001600160a01b0381166105055760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f74203078000060448201526064016104a6565b60d080546001600160a01b0319166001600160a01b0383169081179091556040519081527f1c794a043683a294127c95bc365bae91b63b651eb9884a2c9120afee2bb690b4906020015b60405180910390a150565b600060cd5460cc5461056c9190611a28565b905090565b600260655414156105945760405162461bcd60e51b81526004016104a6906119b9565b6002606555336105a2610d8d565b60cf556105ad6109a9565b60ce556001600160a01b038116156105f4576105c8816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b600082116106385760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b60448201526064016104a6565b8160d3600082825461064a9190611a47565b909155505033600090815260d460205260408120805484929061066e908490611a47565b909155505060ca5461068a906001600160a01b031633846110c4565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001606555565b60006106d3610d8d565b60cf556106de6109a9565b60ce556001600160a01b03811615610725576106f9816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b60d0546001600160a01b0316331461077f5760405162461bcd60e51b815260206004820152601760248201527f4e6f742072657761726473446973747269627574696f6e00000000000000000060448201526064016104a6565b60c954610797906001600160a01b031633308561112c565b60cb5442106107b55760cd546107ad9083611a08565b60cc556107f7565b60004260cb546107c59190611a47565b9050600060cc54826107d79190611a28565b60cd549091506107e782866119f0565b6107f19190611a08565b60cc5550505b4260ce81905560cd54610809916119f0565b60cb556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b600260655414156108675760405162461bcd60e51b81526004016104a6906119b9565b600260655533610875610d8d565b60cf556108806109a9565b60ce556001600160a01b038116156108c75761089b816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b33600090815260d2602052604090205480156109385733600081815260d2602052604081205560c954610906916001600160a01b0390911690836110c4565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016106b8565b50506001606555565b6033546001600160a01b0316331461096b5760405162461bcd60e51b81526004016104a690611984565b61097361116a565b565b6033546001600160a01b0316331461099f5760405162461bcd60e51b81526004016104a690611984565b61097360006111fd565b600060cb5442106109bb575060cb5490565b504290565b6033546001600160a01b031633146109ea5760405162461bcd60e51b81526004016104a690611984565b61097361124f565b6033546001600160a01b03163314610a1c5760405162461bcd60e51b81526004016104a690611984565b60ca546001600160a01b03838116911614801590610a48575060c9546001600160a01b03838116911614155b610aaf5760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b65604482015271371030b732103932bbb0b932103a37b5b2b760711b60648201526084016104a6565b610ac36001600160a01b03831633836110c4565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610838565b60026065541415610b255760405162461bcd60e51b81526004016104a6906119b9565b600260655560975460ff1615610b705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104a6565b33610b79610d8d565b60cf55610b846109a9565b60ce556001600160a01b03811615610bcb57610b9f816103ff565b6001600160a01b038216600090815260d2602090815260408083209390935560cf5460d1909152919020555b60008211610c0c5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b60448201526064016104a6565b8160d36000828254610c1e91906119f0565b909155505033600090815260d4602052604081208054849290610c429084906119f0565b909155505060ca54610c5f906001600160a01b031633308561112c565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016106b8565b6033546001600160a01b03163314610cbb5760405162461bcd60e51b81526004016104a690611984565b60cb544211610d585760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a4016104a6565b60cd8190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200161054f565b600060d35460001415610da1575060cf5490565b60d35460cc5460ce54610db26109a9565b610dbc9190611a47565b610dc69190611a28565b610dd890670de0b6b3a7640000611a28565b610de29190611a08565b60cf5461056c91906119f0565b600054610100900460ff1680610e08575060005460ff16155b610e245760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff16158015610e46576000805461ffff19166101011790555b6001600160a01b038416610e9c5760405162461bcd60e51b815260206004820152601760248201527f726577617264546f6b656e206d757374206e6f7420307800000000000000000060448201526064016104a6565b6001600160a01b038316610ef25760405162461bcd60e51b815260206004820152601860248201527f7374616b696e67546f6b656e206d757374206e6f74203078000000000000000060448201526064016104a6565b6001600160a01b038516610f485760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f74203078000060448201526064016104a6565b81610f955760405162461bcd60e51b815260206004820152601a60248201527f726577617264734475726174696f6e206d757374206e6f74203000000000000060448201526064016104a6565b610f9d6112ca565b610fa5611345565b610fad6113a4565b60c980546001600160a01b038087166001600160a01b03199283161790925560ca805486841690831617905560d080549288169290911691909117905560cd8290558015611001576000805461ff00191690555b5050505050565b33600090815260d4602052604090205461102190610571565b610973610844565b6033546001600160a01b031633146110535760405162461bcd60e51b81526004016104a690611984565b6001600160a01b0381166110b85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a6565b6110c1816111fd565b50565b6040516001600160a01b03831660248201526044810182905261112790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261140b565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526111649085906323b872dd60e01b906084016110f0565b50505050565b60975460ff166111b35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104a6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156112955760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104a6565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111e03390565b600054610100900460ff16806112e3575060005460ff16155b6112ff5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff16158015611321576000805461ffff19166101011790555b6113296114dd565b611331611547565b80156110c1576000805461ff001916905550565b600054610100900460ff168061135e575060005460ff16155b61137a5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff1615801561139c576000805461ffff19166101011790555b6113316115a7565b600054610100900460ff16806113bd575060005460ff16155b6113d95760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff161580156113fb576000805461ffff19166101011790555b6114036114dd565b611331611617565b6000611460826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661168c9092919063ffffffff16565b805190915015611127578080602001905181019061147e91906118af565b6111275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a6565b600054610100900460ff16806114f6575060005460ff16155b6115125760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff16158015611331576000805461ffff191661010117905580156110c1576000805461ff001916905550565b600054610100900460ff1680611560575060005460ff16155b61157c5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff1615801561159e576000805461ffff19166101011790555b611331336111fd565b600054610100900460ff16806115c0575060005460ff16155b6115dc5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff161580156115fe576000805461ffff19166101011790555b600160655580156110c1576000805461ff001916905550565b600054610100900460ff1680611630575060005460ff16155b61164c5760405162461bcd60e51b81526004016104a690611936565b600054610100900460ff1615801561166e576000805461ffff19166101011790555b6097805460ff1916905580156110c1576000805461ff001916905550565b606061169b84846000856116a5565b90505b9392505050565b6060824710156117065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a6565b843b6117545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a6565b600080866001600160a01b0316858760405161177091906118e7565b60006040518083038185875af1925050503d80600081146117ad576040519150601f19603f3d011682016040523d82523d6000602084013e6117b2565b606091505b50915091506117c28282866117cd565b979650505050505050565b606083156117dc57508161169e565b8251156117ec5782518084602001fd5b8160405162461bcd60e51b81526004016104a69190611903565b80356001600160a01b038116811461181d57600080fd5b919050565b600060208284031215611833578081fd5b61169e82611806565b60008060008060808587031215611851578283fd5b61185a85611806565b935061186860208601611806565b925061187660408601611806565b9396929550929360600135925050565b60008060408385031215611898578182fd5b6118a183611806565b946020939093013593505050565b6000602082840312156118c0578081fd5b8151801515811461169e578182fd5b6000602082840312156118e0578081fd5b5035919050565b600082516118f9818460208701611a5e565b9190910192915050565b6020815260008251806020840152611922816040850160208701611a5e565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611a0357611a03611a8a565b500190565b600082611a2357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a4257611a42611a8a565b500290565b600082821015611a5957611a59611a8a565b500390565b60005b83811015611a79578181015183820152602001611a61565b838111156111645750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207adcb9a99cea2be8083819d6b9869df96d4959977a8f1285cb401d1b9a5701ea64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 177,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 180,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3131,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 170,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 344,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 387,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 238,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 329,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19861,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20Upgradeable)1039"
      },
      {
        "astId": 19864,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20Upgradeable)1039"
      },
      {
        "astId": 19866,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "periodFinish",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 19868,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 19870,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 19872,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 19874,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 19876,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardsDistribution",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 19880,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19884,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19886,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 19890,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)1039": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}