{
  "address": "0x911148dCFf665323702cb57fC84DB5d226a79053",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDistribution",
          "type": "address"
        }
      ],
      "name": "RewardsDistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastStakeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "setLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d789921cc5ab246150829db8e3bbac2f8e6d076bd5891a2749e779226fe4634",
  "receipt": {
    "to": null,
    "from": "0x7285b7AD0D1Bbe4d1D6F27A5829F5B69e126C8dA",
    "contractAddress": "0x911148dCFf665323702cb57fC84DB5d226a79053",
    "transactionIndex": 17,
    "gasUsed": "1613962",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000002000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000010000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000020000000001000000000000400000000000000000100000000000000000000000000000000000000000000000000000000000000010040000100000",
    "blockHash": "0x9acf854264ed107a1c223bae5b5ccb308b55edace75a2c853e82a0f6fa4a54a6",
    "transactionHash": "0x2d789921cc5ab246150829db8e3bbac2f8e6d076bd5891a2749e779226fe4634",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 26196547,
        "transactionHash": "0x2d789921cc5ab246150829db8e3bbac2f8e6d076bd5891a2749e779226fe4634",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007285b7ad0d1bbe4d1d6f27a5829f5b69e126c8da",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001133b640154860000000000000000000000000000000000000000000000000771b751be5f3a5836000000000000000000000000000000000000000000014f2639614878545a20b000000000000000000000000000000000000000000000000770a4165a5de5d236000000000000000000000000000000000000000000014f263a7483dc55aea6b0",
        "logIndex": 56,
        "blockHash": "0x9acf854264ed107a1c223bae5b5ccb308b55edace75a2c853e82a0f6fa4a54a6"
      }
    ],
    "blockNumber": 26196547,
    "cumulativeGasUsed": "3479936",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ecb2d362b414898ed6879e858940097",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TokenStaking.sol\":\"TokenStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x45ed45e599d282187d4eb122e5b99e403f3d87853ba6c28a844702141d3fa587\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x046a0ed44997d20c6fac6fb186cb2ce8957a1b25497f713bc18c79db21e57dee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"contracts/staking/TokenStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\ncontract TokenStaking is OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20Upgradeable public rewardsToken;\\n    IERC20Upgradeable public stakingToken;\\n    uint256 public lockPeriod;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public rewardsDuration;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    address public rewardsDistribution;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) public lastStakeTime;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        address _rewardsDistribution,\\n        address _rewardsToken,\\n        address _stakingToken,\\n        uint256 _rewardsDuration,\\n        uint256 _lockPeriod\\n    ) external initializer {\\n        require(_rewardsToken != address(0), \\\"rewardToken must not 0x\\\");\\n        require(_stakingToken != address(0), \\\"stakingToken must not 0x\\\");\\n        require(_rewardsDistribution != address(0), \\\"rewardDistribution must not 0x\\\");\\n        require(_rewardsDuration != 0, \\\"rewardsDuration must not 0\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        rewardsToken = IERC20Upgradeable(_rewardsToken);\\n        stakingToken = IERC20Upgradeable(_stakingToken);\\n        rewardsDistribution = _rewardsDistribution;\\n        rewardsDuration = _rewardsDuration;\\n        lockPeriod = _lockPeriod;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) /\\n            1e18 +\\n            rewards[account];\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate * rewardsDuration;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply += amount;\\n        _balances[msg.sender] += amount;\\n        lastStakeTime[msg.sender] = block.timestamp;\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(lastStakeTime[msg.sender] + lockPeriod <= block.timestamp, \\\"Still locked\\\");\\n        _totalSupply -= amount;\\n        _balances[msg.sender] -= amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        require(lastStakeTime[msg.sender] + lockPeriod <= block.timestamp, \\\"Still locked\\\");\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward) external updateReward(address(0)) {\\n        require(msg.sender == rewardsDistribution, \\\"Not rewardsDistribution\\\");\\n\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / rewardsDuration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (reward + leftover) / rewardsDuration;\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardsDuration;\\n        emit RewardAdded(reward);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(\\n            tokenAddress != address(stakingToken) && tokenAddress != address(rewardsToken),\\n            \\\"Cannot withdraw the staking token and reward token\\\"\\n        );\\n        IERC20Upgradeable(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(_rewardsDuration);\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\\n        require(_rewardsDistribution != address(0), \\\"rewardDistribution must not 0x\\\");\\n        rewardsDistribution = _rewardsDistribution;\\n        emit RewardsDistributionUpdated(_rewardsDistribution);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setLockPeriod(uint256 _lockPeriod) external onlyOwner {\\n        lockPeriod = _lockPeriod;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event RewardsDistributionUpdated(address newDistribution);\\n    event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0xde3f56f2e13e26fee6bb67722dea55c10018565c147cd94c532bb0b5da72b519\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611c3c806100206000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c80637b0a47ee1161011a578063a6b63eb8116100ad578063d1af0c7d1161007c578063d1af0c7d1461041c578063df136d651461042f578063e9fad8ee14610438578063ebe2b12b14610440578063f2fde38b1461044957600080fd5b8063a6b63eb8146103e5578063c8f33c91146103f8578063cc1a378f14610401578063cd3daf9d1461041457600080fd5b80638980f11f116100e95780638980f11f1461038e5780638b876347146103a15780638da5cb5b146103c1578063a694fc3a146103d257600080fd5b80637b0a47ee146103555780637bb1ca191461035e57806380faa57d1461037e5780638456cb591461038657600080fd5b80633d18b9121161019d5780635c975abb1161016c5780635c975abb146102e857806370a08231146102fe578063715018a61461032757806372f702f31461032f578063779972da1461034257600080fd5b80633d18b912146102a45780633f4ba83a146102ac5780633fc6df6e146102b45780633fd8b02f146102df57600080fd5b80631c1f78eb116101d95780631c1f78eb1461026d5780632e1a7d4d14610275578063386a9525146102885780633c6b16ab1461029157600080fd5b80628cc2621461020a5780630700037d1461023057806318160ddd146102505780631976214314610258575b600080fd5b61021d61021836600461197e565b61045c565b6040519081526020015b60405180910390f35b61021d61023e36600461197e565b60d36020526000908152604090205481565b60d45461021d565b61026b61026636600461197e565b6104d9565b005b61021d6105b7565b61026b610283366004611a35565b6105ce565b61021d60ce5481565b61026b61029f366004611a35565b610781565b61026b6108fc565b61026b610a54565b60d1546102c7906001600160a01b031681565b6040516001600160a01b039091168152602001610227565b61021d60cb5481565b60975460ff166040519015158152602001610227565b61021d61030c36600461197e565b6001600160a01b0316600090815260d5602052604090205490565b61026b610a88565b60ca546102c7906001600160a01b031681565b61026b610350366004611a35565b610abc565b61021d60cd5481565b61021d61036c36600461197e565b60d66020526000908152604090205481565b61021d610aeb565b61026b610b02565b61026b61039c3660046119ec565b610b34565b61021d6103af36600461197e565b60d26020526000908152604090205481565b6033546001600160a01b03166102c7565b61026b6103e0366004611a35565b610c44565b61026b6103f3366004611998565b610de7565b61021d60cf5481565b61026b61040f366004611a35565b611006565b61021d611102565b60c9546102c7906001600160a01b031681565b61021d60d05481565b61026b611164565b61021d60cc5481565b61026b61045736600461197e565b611185565b6001600160a01b038116600090815260d3602090815260408083205460d2909252822054670de0b6b3a764000090610492611102565b61049c9190611bad565b6001600160a01b038516600090815260d560205260409020546104bf9190611b8e565b6104c99190611b6e565b6104d39190611b56565b92915050565b6033546001600160a01b0316331461050c5760405162461bcd60e51b815260040161050390611aea565b60405180910390fd5b6001600160a01b0381166105625760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f7420307800006044820152606401610503565b60d180546001600160a01b0319166001600160a01b0383169081179091556040519081527f1c794a043683a294127c95bc365bae91b63b651eb9884a2c9120afee2bb690b4906020015b60405180910390a150565b600060ce5460cd546105c99190611b8e565b905090565b600260655414156105f15760405162461bcd60e51b815260040161050390611b1f565b6002606555336105ff611102565b60d05561060a610aeb565b60cf556001600160a01b03811615610651576106258161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b600082116106955760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b6044820152606401610503565b60cb5433600090815260d6602052604090205442916106b391611b56565b11156106f05760405162461bcd60e51b815260206004820152600c60248201526b14dd1a5b1b081b1bd8dad95960a21b6044820152606401610503565b8160d460008282546107029190611bad565b909155505033600090815260d5602052604081208054849290610726908490611bad565b909155505060ca54610742906001600160a01b03163384611220565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001606555565b600061078b611102565b60d055610796610aeb565b60cf556001600160a01b038116156107dd576107b18161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b60d1546001600160a01b031633146108375760405162461bcd60e51b815260206004820152601760248201527f4e6f742072657761726473446973747269627574696f6e0000000000000000006044820152606401610503565b60c95461084f906001600160a01b0316333085611288565b60cc54421061086d5760ce546108659083611b6e565b60cd556108af565b60004260cc5461087d9190611bad565b9050600060cd548261088f9190611b8e565b60ce5490915061089f8286611b56565b6108a99190611b6e565b60cd5550505b4260cf81905560ce546108c191611b56565b60cc556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b6002606554141561091f5760405162461bcd60e51b815260040161050390611b1f565b60026065553361092d611102565b60d055610938610aeb565b60cf556001600160a01b0381161561097f576109538161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b60cb5433600090815260d66020526040902054429161099d91611b56565b11156109da5760405162461bcd60e51b815260206004820152600c60248201526b14dd1a5b1b081b1bd8dad95960a21b6044820152606401610503565b33600090815260d360205260409020548015610a4b5733600081815260d3602052604081205560c954610a19916001600160a01b039091169083611220565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048690602001610770565b50506001606555565b6033546001600160a01b03163314610a7e5760405162461bcd60e51b815260040161050390611aea565b610a866112c6565b565b6033546001600160a01b03163314610ab25760405162461bcd60e51b815260040161050390611aea565b610a866000611359565b6033546001600160a01b03163314610ae65760405162461bcd60e51b815260040161050390611aea565b60cb55565b600060cc544210610afd575060cc5490565b504290565b6033546001600160a01b03163314610b2c5760405162461bcd60e51b815260040161050390611aea565b610a866113ab565b6033546001600160a01b03163314610b5e5760405162461bcd60e51b815260040161050390611aea565b60ca546001600160a01b03838116911614801590610b8a575060c9546001600160a01b03838116911614155b610bf15760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b65604482015271371030b732103932bbb0b932103a37b5b2b760711b6064820152608401610503565b610c056001600160a01b0383163383611220565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891016108f0565b60026065541415610c675760405162461bcd60e51b815260040161050390611b1f565b600260655560975460ff1615610cb25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b33610cbb611102565b60d055610cc6610aeb565b60cf556001600160a01b03811615610d0d57610ce18161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b60008211610d4e5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610503565b8160d46000828254610d609190611b56565b909155505033600090815260d5602052604081208054849290610d84908490611b56565b909155505033600081815260d66020526040902042905560ca54610db5916001600160a01b03909116903085611288565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90602001610770565b600054610100900460ff1680610e00575060005460ff16155b610e1c5760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff16158015610e3e576000805461ffff19166101011790555b6001600160a01b038516610e945760405162461bcd60e51b815260206004820152601760248201527f726577617264546f6b656e206d757374206e6f742030780000000000000000006044820152606401610503565b6001600160a01b038416610eea5760405162461bcd60e51b815260206004820152601860248201527f7374616b696e67546f6b656e206d757374206e6f7420307800000000000000006044820152606401610503565b6001600160a01b038616610f405760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f7420307800006044820152606401610503565b82610f8d5760405162461bcd60e51b815260206004820152601a60248201527f726577617264734475726174696f6e206d757374206e6f7420300000000000006044820152606401610503565b610f95611426565b610f9d6114a1565b610fa5611500565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560d180549289169290911691909117905560ce83905560cb8290558015610ffe576000805461ff00191690555b505050505050565b6033546001600160a01b031633146110305760405162461bcd60e51b815260040161050390611aea565b60cc5442116110cd5760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610503565b60ce8190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3906020016105ac565b600060d45460001415611116575060d05490565b60d45460cd5460cf54611127610aeb565b6111319190611bad565b61113b9190611b8e565b61114d90670de0b6b3a7640000611b8e565b6111579190611b6e565b60d0546105c99190611b56565b33600090815260d5602052604090205461117d906105ce565b610a866108fc565b6033546001600160a01b031633146111af5760405162461bcd60e51b815260040161050390611aea565b6001600160a01b0381166112145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610503565b61121d81611359565b50565b6040516001600160a01b03831660248201526044810182905261128390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611567565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112c09085906323b872dd60e01b9060840161124c565b50505050565b60975460ff1661130f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610503565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156113f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861133c3390565b600054610100900460ff168061143f575060005460ff16155b61145b5760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff1615801561147d576000805461ffff19166101011790555b611485611639565b61148d6116a3565b801561121d576000805461ff001916905550565b600054610100900460ff16806114ba575060005460ff16155b6114d65760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff161580156114f8576000805461ffff19166101011790555b61148d611703565b600054610100900460ff1680611519575060005460ff16155b6115355760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff16158015611557576000805461ffff19166101011790555b61155f611639565b61148d611773565b60006115bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117e89092919063ffffffff16565b80519091501561128357808060200190518101906115da9190611a15565b6112835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610503565b600054610100900460ff1680611652575060005460ff16155b61166e5760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff1615801561148d576000805461ffff1916610101179055801561121d576000805461ff001916905550565b600054610100900460ff16806116bc575060005460ff16155b6116d85760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff161580156116fa576000805461ffff19166101011790555b61148d33611359565b600054610100900460ff168061171c575060005460ff16155b6117385760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff1615801561175a576000805461ffff19166101011790555b6001606555801561121d576000805461ff001916905550565b600054610100900460ff168061178c575060005460ff16155b6117a85760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff161580156117ca576000805461ffff19166101011790555b6097805460ff19169055801561121d576000805461ff001916905550565b60606117f78484600085611801565b90505b9392505050565b6060824710156118625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610503565b843b6118b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610503565b600080866001600160a01b031685876040516118cc9190611a4d565b60006040518083038185875af1925050503d8060008114611909576040519150601f19603f3d011682016040523d82523d6000602084013e61190e565b606091505b509150915061191e828286611929565b979650505050505050565b606083156119385750816117fa565b8251156119485782518084602001fd5b8160405162461bcd60e51b81526004016105039190611a69565b80356001600160a01b038116811461197957600080fd5b919050565b60006020828403121561198f578081fd5b6117fa82611962565b600080600080600060a086880312156119af578081fd5b6119b886611962565b94506119c660208701611962565b93506119d460408701611962565b94979396509394606081013594506080013592915050565b600080604083850312156119fe578182fd5b611a0783611962565b946020939093013593505050565b600060208284031215611a26578081fd5b815180151581146117fa578182fd5b600060208284031215611a46578081fd5b5035919050565b60008251611a5f818460208701611bc4565b9190910192915050565b6020815260008251806020840152611a88816040850160208701611bc4565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611b6957611b69611bf0565b500190565b600082611b8957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ba857611ba8611bf0565b500290565b600082821015611bbf57611bbf611bf0565b500390565b60005b83811015611bdf578181015183820152602001611bc7565b838111156112c05750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208673069f0992c014f90fba52c615f7fb1611a407df34b9c29cd38e68dfc5502d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c80637b0a47ee1161011a578063a6b63eb8116100ad578063d1af0c7d1161007c578063d1af0c7d1461041c578063df136d651461042f578063e9fad8ee14610438578063ebe2b12b14610440578063f2fde38b1461044957600080fd5b8063a6b63eb8146103e5578063c8f33c91146103f8578063cc1a378f14610401578063cd3daf9d1461041457600080fd5b80638980f11f116100e95780638980f11f1461038e5780638b876347146103a15780638da5cb5b146103c1578063a694fc3a146103d257600080fd5b80637b0a47ee146103555780637bb1ca191461035e57806380faa57d1461037e5780638456cb591461038657600080fd5b80633d18b9121161019d5780635c975abb1161016c5780635c975abb146102e857806370a08231146102fe578063715018a61461032757806372f702f31461032f578063779972da1461034257600080fd5b80633d18b912146102a45780633f4ba83a146102ac5780633fc6df6e146102b45780633fd8b02f146102df57600080fd5b80631c1f78eb116101d95780631c1f78eb1461026d5780632e1a7d4d14610275578063386a9525146102885780633c6b16ab1461029157600080fd5b80628cc2621461020a5780630700037d1461023057806318160ddd146102505780631976214314610258575b600080fd5b61021d61021836600461197e565b61045c565b6040519081526020015b60405180910390f35b61021d61023e36600461197e565b60d36020526000908152604090205481565b60d45461021d565b61026b61026636600461197e565b6104d9565b005b61021d6105b7565b61026b610283366004611a35565b6105ce565b61021d60ce5481565b61026b61029f366004611a35565b610781565b61026b6108fc565b61026b610a54565b60d1546102c7906001600160a01b031681565b6040516001600160a01b039091168152602001610227565b61021d60cb5481565b60975460ff166040519015158152602001610227565b61021d61030c36600461197e565b6001600160a01b0316600090815260d5602052604090205490565b61026b610a88565b60ca546102c7906001600160a01b031681565b61026b610350366004611a35565b610abc565b61021d60cd5481565b61021d61036c36600461197e565b60d66020526000908152604090205481565b61021d610aeb565b61026b610b02565b61026b61039c3660046119ec565b610b34565b61021d6103af36600461197e565b60d26020526000908152604090205481565b6033546001600160a01b03166102c7565b61026b6103e0366004611a35565b610c44565b61026b6103f3366004611998565b610de7565b61021d60cf5481565b61026b61040f366004611a35565b611006565b61021d611102565b60c9546102c7906001600160a01b031681565b61021d60d05481565b61026b611164565b61021d60cc5481565b61026b61045736600461197e565b611185565b6001600160a01b038116600090815260d3602090815260408083205460d2909252822054670de0b6b3a764000090610492611102565b61049c9190611bad565b6001600160a01b038516600090815260d560205260409020546104bf9190611b8e565b6104c99190611b6e565b6104d39190611b56565b92915050565b6033546001600160a01b0316331461050c5760405162461bcd60e51b815260040161050390611aea565b60405180910390fd5b6001600160a01b0381166105625760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f7420307800006044820152606401610503565b60d180546001600160a01b0319166001600160a01b0383169081179091556040519081527f1c794a043683a294127c95bc365bae91b63b651eb9884a2c9120afee2bb690b4906020015b60405180910390a150565b600060ce5460cd546105c99190611b8e565b905090565b600260655414156105f15760405162461bcd60e51b815260040161050390611b1f565b6002606555336105ff611102565b60d05561060a610aeb565b60cf556001600160a01b03811615610651576106258161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b600082116106955760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b6044820152606401610503565b60cb5433600090815260d6602052604090205442916106b391611b56565b11156106f05760405162461bcd60e51b815260206004820152600c60248201526b14dd1a5b1b081b1bd8dad95960a21b6044820152606401610503565b8160d460008282546107029190611bad565b909155505033600090815260d5602052604081208054849290610726908490611bad565b909155505060ca54610742906001600160a01b03163384611220565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001606555565b600061078b611102565b60d055610796610aeb565b60cf556001600160a01b038116156107dd576107b18161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b60d1546001600160a01b031633146108375760405162461bcd60e51b815260206004820152601760248201527f4e6f742072657761726473446973747269627574696f6e0000000000000000006044820152606401610503565b60c95461084f906001600160a01b0316333085611288565b60cc54421061086d5760ce546108659083611b6e565b60cd556108af565b60004260cc5461087d9190611bad565b9050600060cd548261088f9190611b8e565b60ce5490915061089f8286611b56565b6108a99190611b6e565b60cd5550505b4260cf81905560ce546108c191611b56565b60cc556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b6002606554141561091f5760405162461bcd60e51b815260040161050390611b1f565b60026065553361092d611102565b60d055610938610aeb565b60cf556001600160a01b0381161561097f576109538161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b60cb5433600090815260d66020526040902054429161099d91611b56565b11156109da5760405162461bcd60e51b815260206004820152600c60248201526b14dd1a5b1b081b1bd8dad95960a21b6044820152606401610503565b33600090815260d360205260409020548015610a4b5733600081815260d3602052604081205560c954610a19916001600160a01b039091169083611220565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048690602001610770565b50506001606555565b6033546001600160a01b03163314610a7e5760405162461bcd60e51b815260040161050390611aea565b610a866112c6565b565b6033546001600160a01b03163314610ab25760405162461bcd60e51b815260040161050390611aea565b610a866000611359565b6033546001600160a01b03163314610ae65760405162461bcd60e51b815260040161050390611aea565b60cb55565b600060cc544210610afd575060cc5490565b504290565b6033546001600160a01b03163314610b2c5760405162461bcd60e51b815260040161050390611aea565b610a866113ab565b6033546001600160a01b03163314610b5e5760405162461bcd60e51b815260040161050390611aea565b60ca546001600160a01b03838116911614801590610b8a575060c9546001600160a01b03838116911614155b610bf15760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b65604482015271371030b732103932bbb0b932103a37b5b2b760711b6064820152608401610503565b610c056001600160a01b0383163383611220565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891016108f0565b60026065541415610c675760405162461bcd60e51b815260040161050390611b1f565b600260655560975460ff1615610cb25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b33610cbb611102565b60d055610cc6610aeb565b60cf556001600160a01b03811615610d0d57610ce18161045c565b6001600160a01b038216600090815260d3602090815260408083209390935560d05460d2909152919020555b60008211610d4e5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610503565b8160d46000828254610d609190611b56565b909155505033600090815260d5602052604081208054849290610d84908490611b56565b909155505033600081815260d66020526040902042905560ca54610db5916001600160a01b03909116903085611288565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90602001610770565b600054610100900460ff1680610e00575060005460ff16155b610e1c5760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff16158015610e3e576000805461ffff19166101011790555b6001600160a01b038516610e945760405162461bcd60e51b815260206004820152601760248201527f726577617264546f6b656e206d757374206e6f742030780000000000000000006044820152606401610503565b6001600160a01b038416610eea5760405162461bcd60e51b815260206004820152601860248201527f7374616b696e67546f6b656e206d757374206e6f7420307800000000000000006044820152606401610503565b6001600160a01b038616610f405760405162461bcd60e51b815260206004820152601e60248201527f726577617264446973747269627574696f6e206d757374206e6f7420307800006044820152606401610503565b82610f8d5760405162461bcd60e51b815260206004820152601a60248201527f726577617264734475726174696f6e206d757374206e6f7420300000000000006044820152606401610503565b610f95611426565b610f9d6114a1565b610fa5611500565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560d180549289169290911691909117905560ce83905560cb8290558015610ffe576000805461ff00191690555b505050505050565b6033546001600160a01b031633146110305760405162461bcd60e51b815260040161050390611aea565b60cc5442116110cd5760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610503565b60ce8190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3906020016105ac565b600060d45460001415611116575060d05490565b60d45460cd5460cf54611127610aeb565b6111319190611bad565b61113b9190611b8e565b61114d90670de0b6b3a7640000611b8e565b6111579190611b6e565b60d0546105c99190611b56565b33600090815260d5602052604090205461117d906105ce565b610a866108fc565b6033546001600160a01b031633146111af5760405162461bcd60e51b815260040161050390611aea565b6001600160a01b0381166112145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610503565b61121d81611359565b50565b6040516001600160a01b03831660248201526044810182905261128390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611567565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112c09085906323b872dd60e01b9060840161124c565b50505050565b60975460ff1661130f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610503565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156113f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610503565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861133c3390565b600054610100900460ff168061143f575060005460ff16155b61145b5760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff1615801561147d576000805461ffff19166101011790555b611485611639565b61148d6116a3565b801561121d576000805461ff001916905550565b600054610100900460ff16806114ba575060005460ff16155b6114d65760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff161580156114f8576000805461ffff19166101011790555b61148d611703565b600054610100900460ff1680611519575060005460ff16155b6115355760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff16158015611557576000805461ffff19166101011790555b61155f611639565b61148d611773565b60006115bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117e89092919063ffffffff16565b80519091501561128357808060200190518101906115da9190611a15565b6112835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610503565b600054610100900460ff1680611652575060005460ff16155b61166e5760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff1615801561148d576000805461ffff1916610101179055801561121d576000805461ff001916905550565b600054610100900460ff16806116bc575060005460ff16155b6116d85760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff161580156116fa576000805461ffff19166101011790555b61148d33611359565b600054610100900460ff168061171c575060005460ff16155b6117385760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff1615801561175a576000805461ffff19166101011790555b6001606555801561121d576000805461ff001916905550565b600054610100900460ff168061178c575060005460ff16155b6117a85760405162461bcd60e51b815260040161050390611a9c565b600054610100900460ff161580156117ca576000805461ffff19166101011790555b6097805460ff19169055801561121d576000805461ff001916905550565b60606117f78484600085611801565b90505b9392505050565b6060824710156118625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610503565b843b6118b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610503565b600080866001600160a01b031685876040516118cc9190611a4d565b60006040518083038185875af1925050503d8060008114611909576040519150601f19603f3d011682016040523d82523d6000602084013e61190e565b606091505b509150915061191e828286611929565b979650505050505050565b606083156119385750816117fa565b8251156119485782518084602001fd5b8160405162461bcd60e51b81526004016105039190611a69565b80356001600160a01b038116811461197957600080fd5b919050565b60006020828403121561198f578081fd5b6117fa82611962565b600080600080600060a086880312156119af578081fd5b6119b886611962565b94506119c660208701611962565b93506119d460408701611962565b94979396509394606081013594506080013592915050565b600080604083850312156119fe578182fd5b611a0783611962565b946020939093013593505050565b600060208284031215611a26578081fd5b815180151581146117fa578182fd5b600060208284031215611a46578081fd5b5035919050565b60008251611a5f818460208701611bc4565b9190910192915050565b6020815260008251806020840152611a88816040850160208701611bc4565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611b6957611b69611bf0565b500190565b600082611b8957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ba857611ba8611bf0565b500290565b600082821015611bbf57611bbf611bf0565b500390565b60005b83811015611bdf578181015183820152602001611bc7565b838111156112c05750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208673069f0992c014f90fba52c615f7fb1611a407df34b9c29cd38e68dfc5502d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 177,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 180,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4731,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 170,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 344,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 387,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 238,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 329,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22910,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20Upgradeable)2639"
      },
      {
        "astId": 22913,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20Upgradeable)2639"
      },
      {
        "astId": 22915,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 22917,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "periodFinish",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 22919,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 22921,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 22923,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 22925,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 22927,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewardsDistribution",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 22931,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22935,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22937,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 22941,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22945,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "lastStakeTime",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)2639": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}